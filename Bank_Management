import java.util.*;  // Importing utility package for Scanner, Map, List, etc.

// =================== Abstract class ===================
abstract class Account {
    protected String accountNumber; // Unique account number
    protected String holderName;    // Account holder's name
    protected double balance;       // Current balance

    // Constructor to initialize account
    public Account(String accountNumber, String holderName, double balance) {
        this.accountNumber = accountNumber;
        this.holderName = holderName;
        this.balance = balance;
    }

    // Abstract methods (must be implemented by subclasses)
    public abstract void deposit(double amount);
    public abstract void withdraw(double amount);

    // Getter methods
    public double getBalance() {
        return balance;
    }
    public String getAccountNumber() {
        return accountNumber;
    }
    public String getHolderName() {
        return holderName;
    }
}

// =================== SavingsAccount ===================
class SavingsAccount extends Account {
    private List<String> transactions = new ArrayList<>(); // To store transaction history

    // Constructor
    public SavingsAccount(String accountNumber, String holderName, double balance) {
        super(accountNumber, holderName, balance); // Call parent constructor
        transactions.add("Account created with balance: " + balance);
    }

    // Deposit money
    @Override
    public void deposit(double amount) {
        if (amount <= 0) {  // Check for invalid input
            throw new IllegalArgumentException("Deposit amount must be greater than 0");
        }
        balance += amount; // Add amount to balance
        transactions.add("Deposited: " + amount + " | Balance: " + balance);
    }

    // Withdraw money
    @Override
    public void withdraw(double amount) {
        if (amount <= 0) {  // Invalid withdrawal
            throw new IllegalArgumentException("Withdrawal amount must be greater than 0");
        }
        if (amount > balance) {  // Prevent overdraft
            throw new IllegalArgumentException("Insufficient balance");
        }
        balance -= amount; // Deduct amount
        transactions.add("Withdrawn: " + amount + " | Balance: " + balance);
    }

    // Print all past transactions
    public void printTransactions() {
        System.out.println("\nTransaction History for " + holderName + ":");
        for (String t : transactions) {
            System.out.println(" - " + t);
        }
    }
}

// =================== Bank Class ===================
class Bank {
    private Map<String, SavingsAccount> accounts = new HashMap<>(); // Store accounts in a map

    // Create a new account
    public void createAccount(String accountNumber, String holderName, double initialDeposit) {
        if (accounts.containsKey(accountNumber)) { // Prevent duplicate accounts
            throw new IllegalArgumentException("Account already exists!");
        }
        accounts.put(accountNumber, new SavingsAccount(accountNumber, holderName, initialDeposit));
        System.out.println("Account created successfully for " + holderName);
    }

    // Retrieve an account by account number
    public SavingsAccount getAccount(String accountNumber) {
        return accounts.get(accountNumber);
    }
}

// =================== Main Class (UI) ===================
public class BankManagementSystem {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); // Scanner for user input
        Bank bank = new Bank();              // Create Bank object
        boolean exit = false;                // Loop control variable

        while (!exit) {  // Keep running until user exits
            System.out.println("\n===== Bank Management System =====");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Balance Inquiry");
            System.out.println("5. Transaction History");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            
            int choice = sc.nextInt(); // Read menu choice
            sc.nextLine(); // Consume newline character

            try {
                switch (choice) {
                    case 1: // Create new account
                        System.out.print("Enter Account Number: ");
                        String accNo = sc.nextLine();
                        System.out.print("Enter Holder Name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter Initial Deposit: ");
                        double deposit = sc.nextDouble();
                        bank.createAccount(accNo, name, deposit);
                        break;

                    case 2: // Deposit money
                        System.out.print("Enter Account Number: ");
                        accNo = sc.nextLine();
                        System.out.print("Enter Deposit Amount: ");
                        double depAmount = sc.nextDouble();
                        bank.getAccount(accNo).deposit(depAmount);
                        System.out.println("Deposit Successful!");
                        break;

                    case 3: // Withdraw money
                        System.out.print("Enter Account Number: ");
                        accNo = sc.nextLine();
                        System.out.print("Enter Withdrawal Amount: ");
                        double withAmount = sc.nextDouble();
                        bank.getAccount(accNo).withdraw(withAmount);
                        System.out.println("Withdrawal Successful!");
                        break;

                    case 4: // Check balance
                        System.out.print("Enter Account Number: ");
                        accNo = sc.nextLine();
                        System.out.println("Balance: " + bank.getAccount(accNo).getBalance());
                        break;

                    case 5: // Show transaction history
                        System.out.print("Enter Account Number: ");
                        accNo = sc.nextLine();
                        bank.getAccount(accNo).printTransactions();
                        break;

                    case 6: // Exit program
                        exit = true;
                        System.out.println("Exiting... Thank you!");
                        break;

                    default: // Invalid choice
                        System.out.println("Invalid choice! Please try again.");
                }
            } catch (Exception e) { // Handle exceptions gracefully
                System.out.println("Error: " + e.getMessage());
            }
        }
        sc.close(); // Close scanner
    }
}
